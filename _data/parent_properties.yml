- name: Flex-Direction
  class-name: flex-direction
  definition: When working with Flexbox we need to think in terms of two axes - the main axis and the cross axis. The main axis is defined by the flex-direction property.
  items:
    - title: Row (Default)
      elements-count: 3
      class-name: row
      code: | 
        /* items are displayed horizontally as a row */
        .container {
            justify-content: flex-start;
        }
      axis: main

    - title: Row-Reverse
      elements-count: 3
      class-name: row-reverse
      code: | 
        /* items are displayed horizontally as a row in reverse order */
        .container {
            justify-content: row-reverse;
        }
      axis: main

    - title: Column
      elements-count: 3
      class-name: column
      code: | 
        /* items are displayed vertically, as a column */
        .container {
            justify-content: column;
        }
      axis: cross

    - title: Column-Reverse
      elements-count: 3
      class-name: column-reverse
      code: | 
        /* items are displayed vertically as a column in reverse order */
        .container {
            justify-content: column-reverse;
        }
      axis: cross

- name: Flex-Wrap
  class-name: flex-wrap
  definition: By default, flex items will try to fit onto one line. However, we can change that and allow the items to wrap as needed.
  items:
    - title: NoWrap (Default)
      elements-count: 6
      class-name: nowrap
      code: | 
        /* items are not allowed to wrap; all flex items will be on one line */
        .container {
            flex-wrap: nowrap;
        }
      axis: main

    - title: Wrap
      elements-count: 6
      class-name: wrap
      code: | 
        /* items are allowed to wrap, if necessary, creating new rows if needed */
        .container {
            flex-wrap: wrap;
        }
      axis: main

    - title: Wrap-Reverse
      elements-count: 6
      class-name: wrap-reverse
      code: | 
        /* items are allowed to wrap, if necessary, in reverse order, creating new rows if needed */
        .container {
            flex-wrap: wrap-reverse;
        }
      axis: main

- name: Flex-Flow
  class-name: flex-flow
  definition: Flex-Flow a shorthand for the flex-direction and flex-wrap properties, which together define the flex containerâ€™s main and cross axes.
  items:
    - title: Row-NoWrap (Default)
      elements-count: 6
      class-name: row-nowrap
      code: | 
        /* items are not allowed to wrap; all flex items will be on one line */
        .container {
            flex-flow: row-nowrap;
        }
      axis: main

    - title: Row-Reverse-NoWrap
      elements-count: 6
      class-name: row-reverse-nowrap
      code: | 
        /* items are not allowed to wrap; flex items will be on one line in reverse order */
        .container {
            flex-flow: row-reverse-nowrap;
        }
      axis: main

    - title: Row-Wrap
      elements-count: 6
      class-name: row-wrap
      code: | 
        /* items are allowed to wrap, if necessary, creating new rows if needed */
        .container {
            flex-flow: row-wrap;
        }
      axis: main

    - title: Column-NoWrap
      elements-count: 7
      class-name: column-nowrap
      code: | 
        /* items are displayed vertically as a column not being allowed to wrap */
        .container {
            flex-flow: column-nowrap;
        }
      axis: cross

    - title: Column-Reverse-NoWrap
      elements-count: 8
      class-name: column-reverse-nowrap
      code: | 
        /* items are displayed vertically as a column in reverse order not being allowed to wrap */
        .container {
            flex-flow: column-reverse-nowrap;
        }
      axis: cross

    - title: Column-Wrap
      elements-count: 8
      class-name: column-wrap
      code: | 
        /* items are displayed vertically as a column, being allowed to wrap if necessary */
        .container {
            flex-flow: column-wrap;
        }
      axis: cross

- name: Justify-Content
  class-name: justify-content
  definition: Justify-Content defines the alignment along the main axis. It helps distribute extra free space.
  items:
    - title: Flex-Start (Default)
      elements-count: 3
      class-name: flex-start
      code: | 
        /* items are aligned toward the start of the flex-direction */
        .container {
            justify-content: flex-start;
        }
      axis: cross

    - title: Center
      elements-count: 3
      class-name: center
      code: | 
        /* items are aligned toward the center of the flex-direction */
        .container {
            justify-content: center;
        }
      axis: cross

    - title: Flex-End
      elements-count: 3
      class-name: flex-end
      code: | 
        /* items are aligned toward the end of the flex-direction */
        .container {
            justify-content: flex-end;
        }
      axis: cross

    - title: Space-Between
      elements-count: 3
      class-name: space-between
      code: | 
        /* items are evenly distributed in the line */
        .container {
            justify-content: space-between;
        }
      axis: cross

    - title: Space-Around
      elements-count: 3
      class-name: space-around
      code: | 
        /* items have equal space on both sides */
        .container {
            justify-content: space-around;
        }
      axis: cross

    - title: Space-Evenly
      elements-count: 3
      class-name: space-evenly
      code: | 
        /* items are distributed so that the spacing between any two items is equal */
        .container {
            justify-content: space-evenly;
        }
      axis: cross

- name: Align-Items
  class-name: align-items
  definition: Align-Items defines the alignment along the cross axis. It works like Justify-Content but in the opposite direction.
  items:
    - title: Stretch (Default) 
      elements-count: 3
      class-name: stretch
      code: | 
        /* items stretch to fill the container, respecting min-width/max-width */
        .container {
            align-items: stretch;
        }
      axis: cross

    - title: Flex-Start 
      elements-count: 3
      class-name: flex-start
      code: | 
        /* items are placed at the start of the cross axis */
        .container {
            align-items: flex-start;
        }
      axis: cross

    - title: Center
      elements-count: 3
      class-name: center
      code: | 
        /* items are centered in the cross-axis */
        .container {
            align-items: center;
        }
      axis: cross

    - title: Flex-End
      elements-count: 3
      class-name: flex-end
      code: | 
        /* items are placed at the end of the cross axis */
        .container {
            align-items: flex-end;
        }
      axis: cross

    - title: Baseline
      elements-count: 3
      class-name: baseline
      code: | 
        /* items are aligned such as their baselines align */
        .container {
            align-items: flex-end;
        }
      axis: cross

