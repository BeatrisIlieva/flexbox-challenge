- name: Flex-Direction
  class-name: flex-direction
  definition: When working with Flexbox we need to think in terms of two axes - the main axis and the cross axis. The main axis is defined by the flex-direction property.
  items:
    - title: Row (Default)
      elements-count: 3
      class-name: row
      code: | 
        /* items are displayed horizontally as a row */
        .flex-container {
            justify-content: flex-start;
        }
      axis: main

    - title: Row-Reverse
      elements-count: 3
      class-name: row-reverse
      code: | 
        /* items are displayed horizontally as a row in reverse order */
        .flex-container {
            justify-content: row-reverse;
        }
      axis: main

    - title: Column
      elements-count: 3
      class-name: column
      code: | 
        /* items are displayed vertically, as a column */
        .flex-container {
            justify-content: column;
        }
      axis: cross

    - title: Column-Reverse
      elements-count: 3
      class-name: column-reverse
      code: | 
        /* items are displayed vertically as a column in reverse order */
        .flex-container {
            justify-content: column-reverse;
        }
      axis: cross

- name: Flex-Wrap
  class-name: flex-wrap
  definition: By default, flex items will try to fit onto one line. However, we can change that and allow the items to wrap as needed.
  items:
    - title: NoWrap (Default)
      elements-count: 5
      class-name: nowrap
      code: | 
        /* items are not allowed to wrap; all flex items will be on one line */
        .flex-container {
            flex-wrap: nowrap;
        }
      axis: main

    - title: Wrap
      elements-count: 5
      class-name: wrap
      code: | 
        /* items are allowed to wrap, if necessary, creating new rows if needed */
        .flex-container {
            flex-wrap: wrap;
        }
      axis: main

    - title: Wrap-Reverse
      elements-count: 5
      class-name: wrap-reverse
      code: | 
        /* items are allowed to wrap, if necessary, in reverse order, creating new rows if needed */
        .flex-container {
            flex-wrap: wrap-reverse;
        }
      axis: main

- name: Flex-Flow
  class-name: flex-flow
  definition: Flex-Flow a shorthand for the flex-direction and flex-wrap properties, which together define the flex container’s main and cross axes.
  items:
    - title: Row-NoWrap (Default)
      elements-count: 6
      class-name: row-nowrap
      code: | 
        /* items are not allowed to wrap; all flex items will be on one line */
        .flex-container {
            flex-flow: row-nowrap;
        }
      axis: main

    - title: Row-Reverse-NoWrap
      elements-count: 6
      class-name: row-reverse-nowrap
      code: | 
        /* items are not allowed to wrap; flex items will be on one line in reverse order */
        .flex-container {
            flex-flow: row-reverse-nowrap;
        }
      axis: main

    - title: Row-Wrap
      elements-count: 6
      class-name: row-wrap
      code: | 
        /* items are allowed to wrap, if necessary, creating new rows if needed */
        .flex-container {
            flex-flow: row-wrap;
        }
      axis: main

    - title: Column-NoWrap
      elements-count: 6
      class-name: column-nowrap
      code: | 
        /* items are displayed vertically as a column not being allowed to wrap */
        .flex-container {
            flex-flow: column-nowrap;
        }
      axis: cross

    - title: Column-Reverse-NoWrap
      elements-count: 6
      class-name: column-reverse-nowrap
      code: | 
        /* items are displayed vertically as a column in reverse order not being allowed to wrap */
        .flex-container {
            flex-flow: column-reverse-nowrap;
        }
      axis: cross

    - title: Column-Wrap
      elements-count: 6
      class-name: column-wrap
      code: | 
        /* items are displayed vertically as a column, being allowed to wrap if necessary */
        .flex-container {
            flex-flow: column-wrap;
        }
      axis: cross

- name: Justify-Content
  class-name: justify-content
  definition: Justify-Content defines the alignment along the main axis. It helps distribute extra free space.
  items:
    - title: Flex-Start (Default)
      elements-count: 3
      class-name: flex-start
      code: | 
        /* items are aligned toward the start of the flex-direction */
        .flex-container {
            justify-content: flex-start;
        }
      axis: cross

    - title: Center
      elements-count: 3
      class-name: center
      code: | 
        /* items are aligned toward the center of the flex-direction */
        .flex-container {
            justify-content: center;
        }
      axis: cross

    - title: Flex-End
      elements-count: 3
      class-name: flex-end
      code: | 
        /* items are aligned toward the end of the flex-direction */
        .flex-container {
            justify-content: flex-end;
        }
      axis: cross

    - title: Space-Between
      elements-count: 3
      class-name: space-between
      code: | 
        /* items are evenly distributed in the line */
        .flex-container {
            justify-content: space-between;
        }
      axis: cross

    - title: Space-Around
      elements-count: 3
      class-name: space-around
      code: | 
        /* items have equal space on both sides */
        .flex-container {
            justify-content: space-around;
        }
      axis: cross

    - title: Space-Evenly
      elements-count: 3
      class-name: space-evenly
      code: | 
        /* items are distributed so that the spacing between any two items is equal */
        .flex-container {
            justify-content: space-evenly;
        }
      axis: cross

- name: Align-Items
  class-name: align-items
  definition: Align-Items defines the alignment along the cross axis. It works like Justify-Content but in the opposite direction.
  items:
    - title: Stretch (Default) 
      elements-count: 4
      class-name: stretch
      code: | 
        /* items stretch to fill the container, respecting min-width/max-width */
        .flex-container {
            align-items: stretch;
        }
      axis: main

    - title: Flex-Start 
      elements-count: 4
      class-name: flex-start
      code: | 
        /* items are placed at the start of the cross axis */
        .flex-container {
            align-items: flex-start;
        }
      axis: main

    - title: Center
      elements-count: 4
      class-name: center
      code: | 
        /* items are centered in the cross-axis */
        .flex-container {
            align-items: center;
        }
      axis: main

    - title: Flex-End
      elements-count: 4
      class-name: flex-end
      code: | 
        /* items are placed at the end of the cross axis */
        .flex-container {
            align-items: flex-end;
        }
      axis: main

    - title: Baseline
      elements-count: 4
      class-name: baseline
      code: | 
        /* items are aligned such as their baselines align */
        .flex-container {
            align-items: flex-end;
        }
      axis: main

- name: Align-Content
  class-name: align-content
  definition: Align-Content aligns a flex container’s lines within when there is extra space in the cross-axis, similar to how justify-content aligns individual items within the main-axis. Note that it only takes effect on multi-line flexible containers, where flex-wrap is set to either wrap or wrap-reverse.
  items:
    - title: Flex-Start (Default) 
      elements-count: 6
      class-name: flex-start
      code: | 
        /* items packed to the start of the container */
        .flex-container {
            align-content: flex-start;
        }
      axis: main

    - title: Center
      elements-count: 6
      class-name: center
      code: | 
        /* items centered in the container */
        .flex-container {
            align-content: center;
        }
      axis: main

    - title: Flex-End
      elements-count: 6
      class-name: flex-end
      code: | 
        /* items packed to the end of the container */
        .flex-container {
            align-content: flex-end;
        }
      axis: main

    - title: Space-Between
      elements-count: 6
      class-name: space-between
      code: | 
        /*  items evenly distributed; the first line is at the start of the container while the last one is at the end */
        .flex-container {
            align-content: space-between;
        }
      axis: main

    - title: Space-Around
      elements-count: 6
      class-name: space-around
      code: | 
        /*  items evenly distributed with equal space around each line */
        .flex-container {
            align-content: space-around;
        }
      axis: main


    - title: Space-Evenly
      elements-count: 6
      class-name: space-evenly
      code: | 
        /*  items are evenly distributed with equal space around them */
        .flex-container {
            align-content: space-evenly;
        }
      axis: main

    - title: Stretch
      elements-count: 6
      class-name: stretch
      code: | 
        /*  lines stretch to take up the remaining space */
        .flex-container {
            align-content: stretch;
        }
      axis: main

- name: Gap
  class-name: gap
  definition: The gap property explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. The gap will only take effect if space applied by justify-content or align-items is smaller.
  items:
    - title: Gap
      elements-count: 6
      class-name: gap
      code: | 
        /* sets spacing between the items both in the row direction and in the column direction */
        .flex-container {
            gap: 2rem;
        }
      axis: main

    - title: Row-Gap
      elements-count: 6
      class-name: row-gap
      code: | 
        /* sets spacing between the items in the row direction */
        .flex-container {
            row-gap: 2rem;
        }
      axis: main

    - title: Column-Gap
      elements-count: 6
      class-name: column-gap
      code: | 
        /* sets spacing between the items in the column direction */
        .flex-container {
            column-gap: 2rem;
        }
      axis: main