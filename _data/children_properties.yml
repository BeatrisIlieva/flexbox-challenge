- name: Flex-Grow
  class-name: flex-grow
  definition: Flex-Grow defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up.
  items:
    - title: 0 (Default)
      elements-count: 3
      class-name: zero
      code: | 
        /* all items have equal width */
        .flex-container .item:nth-child(1) {
            flex-grow: 0;
        }
      axis: main

    - title: 1
      elements-count: 3
      class-name: one
      code: | 
        /* the remaining space in the container is distributed equally to all children */
        .flex-container .item:nth-child(1) {
            flex-grow: 1;
        }
      axis: main

    - title: second-child
      elements-count: 3
      class-name: second-child
      code: | 
        /* the second child takes up twice as much of the available space as either one of the others */
        .flex-container .item:nth-child(2) {
            flex-grow: 2;
        }
      axis: main

    - title: proportionally
      elements-count: 3
      class-name: proportionally
      code: | 
        /* all children grow proportionally */
        .flex-container .item:nth-child(1) {
            flex-grow: 1;
        }

        .flex-container .item:nth-child(2) {
            flex-grow: 2;
        }
        
        .flex-container .item:nth-child(3) {
            flex-grow: 3;
        }
      axis: main

- name: Flex-Shrink
  class-name: flex-shrink
  definition: Flex-Shrink defines the ability for a flex item to shrink if necessary.
  items:
    - title: 1 (Default)
      elements-count: 3
      class-name: one
      code: | 
        /* items shrink if necessary */
        .flex-container .item:nth-child(1),
        .flex-container .item:nth-child(2),
        .flex-container .item:nth-child(3) {
            flex-basis: 7em;
            flex-shrink: 1;
        }
      axis: main

    - title: 0
      elements-count: 3
      class-name: zero
      code: | 
        /* children maintain their width as defined by their flex-basis, without compressing to fit available space */
        .flex-container .item:nth-child(1),
        .flex-container .item:nth-child(2),
        .flex-container .item:nth-child(3) {
            flex-basis: 7em;
            flex-shrink: 0;
        }
      axis: main

- name: Flex-Basis
  class-name: flex-basis
  definition: Flex-Basis defines the default size of an item before the remaining space is distributed.
  items:
    - title: 3em
      elements-count: 3
      class-name: three
      code: | 
        /* items occupy the space they are assigned */
        .flex-container .item:nth-child(1),
        .flex-container .item:nth-child(3) {
            flex-basis: 3em;
        }

        .flex-container .item:nth-child(2), {
            flex-basis: 5em;
        }
      axis: main

    - title: 2em
      elements-count: 3
      class-name: two
      code: | 
        /* items occupy equal space */
        .flex-container .item:nth-child(1),
        .flex-container .item:nth-child(2),
        .flex-container .item:nth-child(3) {
            flex-basis: 2em;
        }
      axis: main

- name: Flex
  class-name: flex
  definition: Flex is the shorthand for flex-grow, flex-shrink and flex-basis combined. 
  items:
    - title: 'grow: 0, shrink: 1, basis: auto (Default)' 
      elements-count: 3
      class-name: grow0-shrink1-basisauto
      code: | 
        /* the first and the third item grow until fill the entire space */
        .flex-container .item:nth-child(2) {
            flex: 0 1 auto;
        }

        .flex-container .item:nth-child(1),
        .flex-container .item:nth-child(3) {
            flex: 1 1 8em;
        }
      axis: main

    - title: 'grow: 1, shrink: 0, basis: 8em'
      elements-count: 3
      class-name: grow1-shrink0-basis5
      code: | 
        /* items are allowed to grow and disallowed to shrink so they go outside of the container */
        .flex-container .item:nth-child(1),
        .flex-container .item:nth-child(3) {
            flex: 1 0 8em;
        }
      axis: main

- name: Align-Self
  class-name: align-self
  definition: Align-Self allows the default alignment (or the one specified by align-items) to be overridden for individual flex items.
  items:
    - title: Flex-Start 
      elements-count: 3
      class-name: flex-start
      code: | 
        /* the second item is placed at the start of the cross axis */
        .flex-container {
            align-self: flex-start;
        }
      axis: main

    - title: Center
      elements-count: 3
      class-name: center
      code: | 
        /* the second item is centered in the cross-axis */
        .flex-container {
            align-self: center;
        }
      axis: main

    - title: Flex-End
      elements-count: 3
      class-name: flex-end
      code: | 
        /* the second item is placed at the end of the cross axis */
        .flex-container {
            align-self: flex-end;
        }
      axis: main

- name: Order
  class-name: order
  definition: By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container.
  items:
    - title: Reversed first and last item 
      elements-count: 4
      class-name: first-last
      code: | 
        /* the first and last item switch their places */
        .flex-container .item:nth-child(1){
            order: 4
        }

        .flex-container .item:nth-child(4){
            order: -1
        }
      axis: main

    - title: All items reversed 
      elements-count: 4
      class-name: all-reversed
      code: | 
        /* all items are reversed */
        .flex-container .item:nth-child(1){
            order: 2
        }

        .flex-container .item:nth-child(2){
            order: -1
        }

        .flex-container .item:nth-child(4){
            order: 3
        }

        .flex-container .item:nth-child(3){
            order: 4
        }
      axis: main


